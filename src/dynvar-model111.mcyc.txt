model{
	for(k in 1:ncyc){
		e1[cyc.start[k]] ~ dlnorm(-m1, tau1)
		v[cyc.start[k]] = 1
		C[cyc.start[k]] = (1 - ((Q.prime*delta)/V))*C.initial[k]+(G.prime*G.Ind[cyc.start[k]]*delta/V) + v[cyc.start[k]]*e1[cyc.start[k]]
		y[cyc.start[k]] ~ dnorm(log(C[cyc.start[k]]), tau2)
		loglik[cyc.start[k]] = log(dnorm(y[cyc.start[k]], log(C[cyc.start[k]]), tau2))
		
		for(i in cyc.start[k]:(cyc.end[k]-1)){
			e1[i+1] ~ dlnorm(-m1, tau1)
			v[i+1] = (1+alpha)*G.Ind[i+1]*v[i] + beta*(1-G.Ind[i+1])*v[i]
    			C[i+1] = (1 - ((Q.prime*delta)/V))*C[i]+(G.prime*G.Ind[i+1]*delta/V) + v[i+1]*e1[i+1]
    			y[i+1] ~ dnorm(log(C[i+1]), tau2)
			loglik[i+1] = log(dnorm(y[i+1], log(C[i+1]), tau2))
		}
	}

	C.initial[1] ~ dlnorm(log(C0), tau1)
	for(cyc in 2:ncyc){
		C.initial[cyc] ~ dlnorm(log(C[cyc.end[cyc-1]]*exp(-Q.prime*bglength[cyc-1]/V)), tau1)
	}
  
  	sigma1 = sqrt(1/tau1)
  	sigma2 = sqrt(1/tau2)
	Q.prime = Q + eLF*QL + eRF*QR
	G.prime = (1 - eL*eLF)*G
	T.end = cyc.end[ncyc]
	C.avg = G.prime / Q.prime * (1 - ((1/(T.end*Q.prime/V)) * (1 - exp(-(T.end*Q.prime/V)))))

	# priors 

  	G ~ dunif(G.prior[1], G.prior[2])

  	Q ~ dunif(Q.prior[1], Q.prior[2])
	QL ~ dunif(QL.prior[1], QL.prior[2])
	QR ~ dunif(QR.prior[1], QR.prior[2])

	eL ~ dunif(eL.prior[1], eL.prior[2])
	eLF ~ dunif(eLF.prior[1], eLF.prior[2])
	eRF ~ dunif(eRF.prior[1], eRF.prior[2])

  	m1 ~ dgamma(m1.prior[1], m1.prior[2])
  	tau1 ~ dgamma(tau1.prior[1], tau1.prior[2])
  	tau2 ~ dgamma(tau2.prior[1], tau2.prior[2])

	alpha ~ dgamma(1, 2)
	beta ~ dunif(0, 1)
}